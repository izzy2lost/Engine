// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "OnlineSubsystemLivePackage.h"
#include "SimpleTokenParser.h"
#include "Interfaces/OnlineEventsInterface.h"
// @ATG_CHANGE : BEGIN - UWP LIVE support
#include "OnlineSubsystemLiveTypes.h"

class FOnlineSubsystemLive;

#if PLATFORM_XBOXONE
#include <EtwPlus.h>
// @ATG_CHANGE : END


/**
 *	FOnlineEventParmLive - Holds the offset and size to a single parameter
 */
class FOnlineEventParmLive
{
public:
	int32		Offset;
	int32		Size;
};

/**
 *	FOnlineEventParmsLive - Holds the parameter data passed into the call event function
 */
class FOnlineEventParmsLive
{
public:
	/**
	 * AddParm
	 *
	 * @param Data - Raw pointer to the start of a binary blob of data
	 * @param Size - Size of the binary data blob
	 */
	FORCEINLINE void AddParm( const void* Data, const int32 Size )
	{
		FOnlineEventParmLive NewParm;

		NewParm.Offset	= ParmData.Num();
		NewParm.Size	= Size;

		Parms.Add( NewParm );

		ParmData.AddUninitialized( Size );

		FMemory::Memcpy( &ParmData[NewParm.Offset], Data, Size );
	}

	/**
	 * Returns the number of parameters
	 */
	FORCEINLINE const int32 GetNumParms() const
	{
		return Parms.Num();
	}

	/**
	 * Returns a parameter given an index
	 *
	 * @param Index - Index of the requested parameter
	 */
	FORCEINLINE const FOnlineEventParmLive& GetParmByIndex( const int32 Index ) const
	{
		return Parms[Index];
	}

	/**
	 * Returns a parameter data given an index
	 *
	 * @param Index - Index of the requested parameter
	 */
	FORCEINLINE const void* GetParmData( const int32 Index ) const
	{
		return (void*)&ParmData[Parms[Index].Offset];
	}

	/**
	 * Returns a parameter data size given an index
	 *
	 * @param Index - Index of the requested parameter
	 */
	FORCEINLINE const int32 GetParmDataSize( const int32 Index ) const
	{
		return Parms[Index].Size;
	}

private:
	TArray< FOnlineEventParmLive >	Parms;
	TArray< uint8 >					ParmData;
};

/**
 *	FOnlineEventFieldsLive - Holds the event field definitions for a single event
 *  Fields define the schema of the parameters passed into events
 */
class FOnlineEventFieldsLive
{
public:
	/**
	 * Adds a field that will define the schema of the event parameters
	 *
	 * @param Type - Value generated by EtwPlus header tool
	 * @param IsLengthField - Value generated by EtwPlus header tool
	 */
	FORCEINLINE void AddField( const uint8 Type, const uint8 IsLengthField )
	{
		ETX_FIELD_DESCRIPTOR FieldDesc = { (UINT8)Type, (UINT8)IsLengthField };

		Fields.Add( FieldDesc );
	}

	/*
	 */
	FORCEINLINE void AddFieldParmName( const TCHAR* FieldParmName )
	{
		FieldParmNames.Add( FieldParmName );
	}

	/**
	 * Returns the number of fields
	 */
	FORCEINLINE const int32 GetNumFields() const
	{
		return Fields.Num();
	}

	/**
	 * Returns the number of field names
	 */
	FORCEINLINE const int32 GetNumFieldParmNames() const
	{
		return FieldParmNames.Num();
	}

	/**
	 * Returns a field given an index
	 *
	 * @param Index - Index of the requested field
	 */
	FORCEINLINE const ETX_FIELD_DESCRIPTOR & GetFieldDescByIndex( const int32 Index ) const
	{
		return Fields[Index];
	}

	/**
	 * Returns a field name given an index
	 *
	 * @param Index - Index of the requested field name
	 */
	FORCEINLINE const FName& GetFieldParmNameByIndex( const int32 Index ) const
	{
		return FieldParmNames[Index];
	}

	/**
	 * Sets the name of this field list
	 *
	 * @param InName - Name of field
	 */
	FORCEINLINE void SetName( const TCHAR* InName ) 
	{ 
		Name = InName; 
	}

	/**
	 * Gets the name of this field list
	 */
	FORCEINLINE const FString& GetName() const
	{
		return Name;
	}

private:
	FString							Name;
	TArray< ETX_FIELD_DESCRIPTOR >	Fields;
	TArray< FName >					FieldParmNames;
};

/**
 *	FOnlineEventLive - Interface class for a single event (Live implementation)
 */
class FOnlineEventLive
{
public:
	FOnlineEventLive() : EventMemoryOffset( -1 ) { }

	FString						Name;
	FOnlineEventFieldsLive		Fields;
	int32						EventMemoryOffset;
};

/**
 *	FOnlineEventsLive - Interface class for events (Live implementation)
 */
class FOnlineEventsLive : public IOnlineEvents
{
public:
	FOnlineEventsLive(FOnlineSubsystemLive* InSubsystem);
	~FOnlineEventsLive();

	/**
	 * Calls an event
	 *
	 * @param PlayerId	- Id of the player to call the event on
	 * @param Name		- Name of requested event
	 * @param Parms		- Parameters that will be passed directly to the event
	 */
	virtual bool TriggerEvent( const FUniqueNetId& PlayerId, const TCHAR* EventName, const FOnlineEventParms& Parms ) override;

	virtual void SetPlayerSessionId(const FUniqueNetId& PlayerId, const FGuid& PlayerSessionId) override;

private:
	/**
	 * Event header parsing helpers
	 */
	bool LoadAndInitFromJsonConfig( const TCHAR* JsonConfigName );
	bool ParseHeader( const TCHAR* Filename );
	bool ParseDescriptor( FSimpleTokenParser& HeaderParser, const int32 Type );
	bool ParseFieldDescriptorElement( FSimpleTokenParser& HeaderParser );
	bool ParseEventDescriptorElement( FSimpleTokenParser& HeaderParser );
	bool ParseProvider( FSimpleTokenParser& HeaderParser );
	bool ParseIntValues( FSimpleTokenParser& HeaderParser, int32* Values, const int32 NumValues );
	bool ParseEventParameterNames( FSimpleTokenParser & HeaderParser, const TCHAR* EventName  );

	/**
	 * Adds an event that can be called via TriggerEvent
	 *
	 * @param Id - Value generated by EtwPlus header tool
	 * @param Version - Value generated by EtwPlus header tool
	 * @param SchemaVersion - Value generated by EtwPlus header tool
	 * @param Fields - Fields generated by EtwPlus header tool
	 */
	void AddEvent( const uint16 Id, const uint8 Version, const FString& Name, const FString& SchemaVersion, const FOnlineEventFieldsLive& Fields );

	/**
	 * Returns an event given the passed in name
	 *
	 * @param Name - Name of requested event
	 */
	FOnlineEventLive* FindEventByName( const FString& Name );

	/**
	 * Calls an event
	 *
	 * @param Name - Name of requested event
	 * @param Parms - Parameters that will be passed directly to the event
	 */
	bool TriggerEvent( const TCHAR* Name, const FOnlineEventParmsLive& Parms );

	/**
	 * Registers the etx provider
	 *
	 * @param Name - Value generated by EtwPlus header tool
	 * @param Guid - Value generated by EtwPlus header tool
	 * @param InRegHandle - Value generated by EtwPlus header tool
	 */
	bool RegisterProvider( const FString& Name, const GUID& Guid, const REGHANDLE InRegHandle );

	/**
	 * Unregisters the etx provider
	 */
	void UnregisterProvider();

	/** The owning subsystem */
	FOnlineSubsystemLive*				Subsystem;

	ETX_PROVIDER_DESCRIPTOR*			Provider;
	REGHANDLE							RegHandle;

	TArray< FOnlineEventLive >			Events;
	TArray< uint8 >						EventMemory;

	TArray< FOnlineEventFieldsLive >	Fields;

	TMap<FUniqueNetIdLive, FGuid>		PlayerSessionIds;
};

typedef TSharedPtr<FOnlineEventsLive, ESPMode::ThreadSafe> FOnlineEventsLivePtr;

// @ATG_CHANGE : BEGIN - UWP LIVE support
#else
/**
*	FOnlineEventsLive - Interface class for events (Live implementation)
*/
class FOnlineEventsLive : public IOnlineEvents
{
public:
	FOnlineEventsLive(FOnlineSubsystemLive* InSubsystem);
	~FOnlineEventsLive();

	/**
	* Calls an event
	*
	* @param PlayerId	- Id of the player to call the event on
	* @param Name		- Name of requested event
	* @param Parms		- Parameters that will be passed directly to the event
	*/
	virtual bool TriggerEvent(const FUniqueNetId& PlayerId, const TCHAR* EventName, const FOnlineEventParms& Parms) override;

	virtual void SetPlayerSessionId(const FUniqueNetId& PlayerId, const FGuid& PlayerSessionId) override;

private:
	/** The owning subsystem */
	FOnlineSubsystemLive*				Subsystem;

	TMap<FUniqueNetIdLive, FGuid>		PlayerSessionIds;
};

#endif
// @ATG_CHANGE : END
