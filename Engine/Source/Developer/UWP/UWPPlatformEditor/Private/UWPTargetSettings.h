
/*=============================================================================
	UWPTargetSettings.h: Declares the UUWPTargetSettings class.
=============================================================================*/

#pragma once

#include "WindowsTargetSettings.h"
#include "UWPLocalizedResources.h"
#include "UWPTargetSettings.generated.h"

USTRUCT()
struct FUWPDLCSettings
{
public:
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, config, Category = DLC)
	FString PluginName;

	UPROPERTY(EditAnywhere, config, Category = DLC, Meta = (DisplayName = "Package/Identity/Name"))
	FString PackageIdentityName;

	UPROPERTY(EditAnywhere, config, Category = DLC, Meta = (DisplayName = "Package/Identity/Version"))
	FString PackageIdentityVersion;
};

/**
 * Implements the settings for the UWP target platform.
 */
UCLASS(config = Engine, defaultconfig)
class UUWPTargetSettings
	: public UObject
{
public:

	GENERATED_UCLASS_BODY()

	virtual const TCHAR* GetConfigOverridePlatform() const override
	{
		return TEXT("UWP");
	}

	virtual void PostInitProperties() override;

	/**
	* Service Configuration GUID. Must match Dev Center configuration.
	*/
	UPROPERTY(EditAnywhere, config, Category = XboxLive)
	FString ServiceConfigId;

	/**
	* Title ID. Must match Dev Center configuration.
	*/
	UPROPERTY(EditAnywhere, config, Category = XboxLive)
	FString TitleId;

	/**
	* Whether this title's Xbox Live access is via the Xbox Live Creators Program.
	*/
	UPROPERTY(EditAnywhere, config, Category = XboxLive)
	uint32 bIsCreatorsProgramTitle : 1;

	/**
	* Title uses the Achievements 2017 Live configuration. This must match the setting chosen in the title's Live configuration.
	* This value determines which APIs are used by the OnlineSubsystem for interacting with Live.
	*/
	UPROPERTY(EditAnywhere, config, Category = XboxLive, meta = (DisplayName = "Use Achievements 2017", editcondition = "!bIsCreatorsProgramTitle"))
	uint32 bUseAchievements2017 : 1;

	/**
	* Title uses the Stats 2017 Live configuration. This must match the setting chosen in the title's Live configuration.
	* This value determines which APIs are used by the OnlineSubsystem for interacting with Live.
	*/
	UPROPERTY(EditAnywhere, config, Category = XboxLive, meta = (DisplayName = "Use Stats 2017", editcondition="!bIsCreatorsProgramTitle"))
	uint32 bUseStats2017 : 1;

	/**
	* Whether cooked content should be copied into the loose package image generated by deploy from Visual Studio.
	*/
	UPROPERTY(EditAnywhere, config, Category = "Toolchain", Meta = (DisplayName = "Copy Cooked Content for F5 Deployment"))
	uint32 bCopyCookedContentForF5Deployment : 1;

	/**
	* Controls whether to use the retail Windows Store environment for license checks.  This must be turned on
	* when building for submission to the Windows Store, or when sideloading outside of Developer Mode.  Note,
	* however, that testing a build with this flag enables requires that the product is listed in the retail
	* catalog for the Windows Store.
	*/
	UPROPERTY(EditAnywhere, config, Category = "Packaging", AdvancedDisplay, Meta = (DisplayName = "Use Retail Windows Store Environment"))
	uint32 bBuildForRetailWindowsStore : 1;

	UPROPERTY(EditAnywhere, config, Category = "Rendering", meta = (DisplayName = "Enable PIX Profiling"))
	uint32 bEnablePIXProfiling : 1;

	UPROPERTY(EditAnywhere, config, Category = Packaging, meta=(HideAlphaChannel))
	FColor TileBackgroundColor = FColor::FromHex(FString("#000040"));

	UPROPERTY(EditAnywhere, config, Category = Packaging, meta=(HideAlphaChannel))
	FColor SplashScreenBackgroundColor = FColor::FromHex(FString("#000040"));

	/**
	* The value for Package/Identity/Name in the generated AppX Manifest.  If empty, the ProjectName
	* from General Project Settings will be used.  When building for the Windows Store or using Xbox Live this value
	* must match the identity assigned in Dev Center
	*/
	UPROPERTY(EditAnywhere, config, Category = Packaging, Meta = (DisplayName = "Package/Identity/Name override"))
	FString PackageName;

	/**
	* The value for Package/Identity/Publisher in the generated AppX Manifest.  If empty, the CompanyDistinguishedName 
	* from General Project Settings will be used.  When building for the Windows Store or using Xbox Live this value 
	* must match the identity assigned in Dev Center
	*/
	UPROPERTY(EditAnywhere, config, Category = Packaging, Meta = (DisplayName = "Package/Identity/Publisher override"))
	FString PublisherName;

	UPROPERTY(EditAnywhere, config, Category = Packaging)
	TArray<FUWPCorePackageLocalizedResources> PerCultureResources;

	/**
	* Identifies the device family that your package will target.
	*/
	UPROPERTY(EditAnywhere, config, Category = "OS Info")
	FString TargetDeviceFamily;

	/**
	* Minimum version of the universal platform required to run this title.
	* It will not be possible to deploy the build on earlier versions.
	*/
	UPROPERTY(EditAnywhere, config, Category = "OS Info", Meta = (DisplayName = "Minimum supported platform version"))
	FString MinimumPlatformVersion;

	/**
	* Specifies the maximum version of the universal platform on which the
	* title is known to work as expected.  When deployed to later versions
	* the title will experience the runtime behavior of the version given here.
	*/
	UPROPERTY(EditAnywhere, config, Category = "OS Info", Meta = (DisplayName = "Maximum tested platform version"))
	FString MaximumPlatformVersionTested;

	/** The compiler version to use for this project. May be different to the chosen IDE. */
	UPROPERTY(EditAnywhere, config, Category = "Toolchain", Meta = (DisplayName = "Compiler Version"))
	ECompilerVersion CompilerVersion;

	UPROPERTY(EditAnywhere, config, Category = "Toolchain", Meta = (DisplayName = "Windows 10 SDK Version"))
	FString Windows10SDKVersion;

	/**
	* List of supported <Capability><Capability> elements for the application.
	*/
	UPROPERTY(EditAnywhere, config, Category = Capabilities)
	TArray<FString> CapabilityList;

	/**
	* List of supported <Capability><DeviceCapability> elements for the application.
	*/
	UPROPERTY(EditAnywhere, config, Category = Capabilities)
	TArray<FString> DeviceCapabilityList;

	/**
	* List of supported <Capability><uap:Capability> elements for the application.
	*/
	UPROPERTY(EditAnywhere, config, Category = Capabilities)
	TArray<FString> UapCapabilityList;

	/**
	* List of supported <Capability><uap2:Capability> elements for the application.
	*/
	UPROPERTY(EditAnywhere, config, Category = Capabilities)
	TArray<FString> Uap2CapabilityList;

	/**
	* Set default capabilities (InternetClientServer and PrivateNetworkClientServer) for the application.
	*/
	UPROPERTY(EditAnywhere, config, Category = Capabilities)
	bool bSetDefaultCapabilities = true;

	UPROPERTY(EditAnywhere, config, Category = DLC)
	TArray<FUWPDLCSettings> DLCStoreMapping;

	UPROPERTY(EditAnywhere, config, Category = DLC)
	TArray<FUWPDlcLocalizedResources> DLCPerCultureResources;
};
